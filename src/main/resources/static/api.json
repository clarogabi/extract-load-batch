{
    "openapi": "3.0.3",
    "info": {
        "title": "Swagger Extract And Load Data Batch",
        "description": "The Extract and Load Data Batch Swagger UI offers the ability to perform API requests such as GET, POST, PUT and DELETE to different endpoints in the backend service like data sources, data bundles, batch execution, etc.",
        "contact": {
            "email": "gabriela.claro@fatec.sp.gov.br"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:8080"
        }
    ],
    "security": [
        {
            "Authorization": []
        }
    ],
    "tags": [
        {
            "name": "Datasource",
            "description": "Datasource Configuration Properties"
        },
        {
            "name": "Tables",
            "description": "Tables Properties Definitions"
        },
        {
            "name": "Bundles",
            "description": "Tables Bundles Definitions"
        },
        {
            "name": "BundledTables",
            "description": "Bundled Tables Definitions"
        },
        {
            "name": "Batch",
            "description": "Batch Job Execution"
        }
    ],
    "paths": {
        "/v1/datasource": {
            "post": {
                "tags": [
                    "Datasource"
                ],
                "summary": "Post datasource configuration and add connection",
                "description": "Inserts new datasource configuration properties and add connection",
                "operationId": "postDatasourceConnection",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourcePropertiesRequest"
                            },
                            "examples": {
                                "datasourcePropertiesRequest": {
                                    "$ref": "#/components/examples/datasourcePropertiesRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatedObjectResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/datasource/{datasourceId}": {
            "get": {
                "tags": [
                    "Datasource"
                ],
                "summary": "Get datasource configuration",
                "description": "Retrieve datasource configuration data by Id",
                "operationId": "getDatasourceProperties",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "description": "Datasource Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DatasourcePropertiesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Datasource"
                ],
                "summary": "Update datasource configuration",
                "description": "Updates datasource configuration properties",
                "operationId": "putDatasourceProperties",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "description": "Datasource Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DatasourcePropertiesRequest"
                            },
                            "examples": {
                                "datasourcePropertiesRequest": {
                                    "$ref": "#/components/examples/datasourcePropertiesRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Datasource"
                ],
                "summary": "Delete datasource configuration",
                "description": "Deletes datasource configuration properties by Id",
                "operationId": "deleteDatasourceProperties",
                "parameters": [
                    {
                        "in": "path",
                        "name": "datasourceId",
                        "description": "Datasource Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/data/tables": {
            "post": {
                "tags": [
                    "Tables"
                ],
                "summary": "Post table definitions",
                "description": "Inserts new table to be bundled",
                "operationId": "postTable",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataTableRequest"
                            },
                            "examples": {
                                "dataTableRequest": {
                                    "$ref": "#/components/examples/dataTableRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatedObjectResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/data/tables/{tableId}": {
            "get": {
                "tags": [
                    "Tables"
                ],
                "summary": "Get table definitions",
                "description": "Retrieve table definitions data by Id",
                "operationId": "getTable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tableId",
                        "description": "Table Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataTableResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tables"
                ],
                "summary": "Put table definitions",
                "description": "Updates table definitions by Id",
                "operationId": "putTable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tableId",
                        "description": "Table Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataTableRequest"
                            },
                            "examples": {
                                "dataTableRequest": {
                                    "$ref": "#/components/examples/dataTableRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tables"
                ],
                "summary": "Delete table definitions",
                "description": "Deletes table definitions by Id",
                "operationId": "deleteTable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "tableId",
                        "description": "Table Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/data/bundles": {
            "post": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Post definitions of extract and load data bundle",
                "description": "Inserts new data bundle definitions",
                "operationId": "postBundle",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DataBundleRequest"
                            },
                            "examples": {
                                "dataBundleRequest": {
                                    "$ref": "#/components/examples/dataBundleRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatedObjectResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/data/bundles/{bundleId}": {
            "get": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Get data bundle definitions",
                "description": "Retrieve data bundle definitions by Id",
                "operationId": "getBundle",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bundleId",
                        "description": "Bundle Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DataBundleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Put data bundle definitions",
                "description": "Updates data bundle definitions",
                "operationId": "putBundle",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bundleId",
                        "description": "Bundle Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BundleRequest"
                            },
                            "examples": {
                                "bundleRequest": {
                                    "$ref": "#/components/examples/bundleRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Bundles"
                ],
                "summary": "Delete data bundle definitions",
                "description": "Deletes data bundle definitions by Id",
                "operationId": "deleteBundle",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bundleId",
                        "description": "Bundle Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/data/bundles/{bundleId}/tables": {
            "post": {
                "tags": [
                    "BundledTables"
                ],
                "summary": "Post bundled table",
                "description": "Insert new data bundle definition adding new target and source tables.",
                "operationId": "postBundledTables",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bundleId",
                        "description": "Bundle Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BundledTableRequest"
                            },
                            "examples": {
                                "bundledTableRequest": {
                                    "$ref": "#/components/examples/bundledTableRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatedObjectResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/data/bundles/{bundleId}/tables/{bundledTableId}": {
            "get": {
                "tags": [
                    "BundledTables"
                ],
                "summary": "Get bundled table",
                "description": "Retrieve bundled table by Id.",
                "operationId": "getBundledTable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bundleId",
                        "description": "Bundle Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "bundledTableId",
                        "description": "Bundled Table Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BundledTableResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "BundledTables"
                ],
                "summary": "Put bundled table",
                "description": "Updates bundled table by Id.",
                "operationId": "putBundledTable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bundleId",
                        "description": "Bundle Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "bundledTableId",
                        "description": "Bundled Table Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BundledTableRequest"
                            },
                            "examples": {
                                "bundledTableRequest": {
                                    "$ref": "#/components/examples/bundledTableRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BundledTables"
                ],
                "summary": "Delete bundled table",
                "description": "Deletes bundled tables by Id",
                "operationId": "deleteBundledTable",
                "parameters": [
                    {
                        "in": "path",
                        "name": "bundleId",
                        "description": "Bundle Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "in": "path",
                        "name": "bundledTableId",
                        "description": "Bundled Table Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/batch/job": {
            "post": {
                "tags": [
                    "Batch"
                ],
                "summary": "Post extract-load data batch job execution",
                "description": "Start batch job execution using job parameters request for extract-load data",
                "operationId": "postBatchJobExecution",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/JobParametersRequest"
                            },
                            "examples": {
                                "jobParametersRequest": {
                                    "$ref": "#/components/examples/jobParametersRequest"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreatedObjectResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        },
        "/v1/batch/job/{jobExecutionId}": {
            "get": {
                "tags": [
                    "Batch"
                ],
                "summary": "Get batch job execution status and metadata",
                "description": "Retrieve batch job execution status and metadata by Id.",
                "operationId": "getBatchJobExecution",
                "parameters": [
                    {
                        "in": "path",
                        "name": "jobExecutionId",
                        "description": "Job Execution Id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobExecutionResponse"
                                },
                                "examples": {
                                    "jobExecutionResponse": {
                                        "$ref": "#/components/examples/jobExecutionResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/badRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/unauthorized"
                    },
                    "404": {
                        "$ref": "#/components/responses/notFound"
                    },
                    "422": {
                        "$ref": "#/components/responses/unprocessableEntity"
                    },
                    "500": {
                        "$ref": "#/components/responses/serverError"
                    }
                },
                "security": [
                    {
                        "Authorization": []
                    }
                ]
            }
        }
    },
    "components": {
        "responses": {
            "badRequest": {
                "description": "Bad Request",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ProblemDetail"
                        },
                        "examples": {
                            "badRequest": {
                                "$ref": "#/components/examples/badRequest"
                            }
                        }
                    }
                }
            },
            "unauthorized": {
                "description": "Unauthorized",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ProblemDetail"
                        },
                        "examples": {
                            "unauthorized": {
                                "$ref": "#/components/examples/unauthorized"
                            }
                        }
                    }
                }
            },
            "notFound": {
                "description": "Not Found",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ProblemDetail"
                        },
                        "examples": {
                            "notFound": {
                                "$ref": "#/components/examples/notFound"
                            }
                        }
                    }
                }
            },
            "unprocessableEntity": {
                "description": "Unprocessable Entity",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ProblemDetail"
                        },
                        "examples": {
                            "unprocessableEntity": {
                                "$ref": "#/components/examples/unprocessableEntity"
                            }
                        }
                    }
                }
            },
            "serverError": {
                "description": "Server Error",
                "content": {
                    "application/problem+json": {
                        "schema": {
                            "$ref": "#/components/schemas/ProblemDetail"
                        },
                        "examples": {
                            "serverError": {
                                "$ref": "#/components/examples/serverError"
                            }
                        }
                    }
                }
            }
        },
        "schemas": {
            "CreatedObjectResponse": {
                "type": "object",
                "title": "CreatedObjectResponse",
                "description": "Body for retrieve unique identifier from created object.",
                "properties": {
                    "uid": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Object unique identifier"
                    }
                },
                "required": [
                    "uid"
                ]
            },
            "BundleRequest": {
                "type": "object",
                "title": "BundleRequest",
                "description": "Body for update bundle definitions",
                "properties": {
                    "bundleName": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Bundle name"
                    },
                    "sourceDatasourceId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier from source Datasource."
                    },
                    "targetDatasourceId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier from target data migration datasource"
                    }
                },
                "required": [
                    "bundleName",
                    "sourceDatasourceId",
                    "targetDatasourceId"
                ]
            },
            "DataBundleRequest": {
                "type": "object",
                "title": "DataBundleRequest",
                "description": "Body for create bundled and bundled tables",
                "properties": {
                    "bundleName": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Bundle name"
                    },
                    "sourceDatasourceId": {
                        "type": "integer",
                        "description": "Unique identifier from source data migration datasource"
                    },
                    "targetDatasourceId": {
                        "type": "integer",
                        "description": "Unique identifier from target data migration datasource"
                    },
                    "bundledTables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BundledTableRequest"
                        },
                        "minItems": 1
                    }
                },
                "required": [
                    "bundleName",
                    "sourceDatasourceId",
                    "targetDatasourceId",
                    "bundledTables"
                ]
            },
            "DataTableRequest": {
                "type": "object",
                "title": "DataTableRequest",
                "description": "Body for create new table definition",
                "properties": {
                    "tablePhysicalName": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9_-]+$",
                        "description": "Table physical name"
                    }
                },
                "required": [
                    "tablePhysicalName"
                ]
            },
            "DataTableResponse": {
                "type": "object",
                "title": "DataTableResponse",
                "description": "Body for retrieve unique identifier from created table definition",
                "properties": {
                    "tableId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Table unique identifier"
                    },
                    "tablePhysicalName": {
                        "type": "string",
                        "description": "Table physical name"
                    },
                    "createDateTime": {
                        "type": "string",
                        "description": "ISO format date time from register creation."
                    },
                    "updateDateTime": {
                        "type": "string",
                        "description": "ISO format date time from last update."
                    }
                }
            },
            "DataBundleResponse": {
                "type": "object",
                "title": "DataBundleResponse",
                "description": "Bundle definitions response",
                "properties": {
                    "bundleId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Bundle unique identifier"
                    },
                    "bundleName": {
                        "type": "string",
                        "description": "Bundle name"
                    },
                    "sourceDatasourceId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier from source datasource."
                    },
                    "targetDatasourceId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier from target datasource."
                    },
                    "bundledTables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BundledTableResponse"
                        }
                    }
                },
                "required": [
                    "clusterName",
                    "sourceDatasourceId",
                    "targetDatasourceId",
                    "tables"
                ]
            },
            "DatasourcePropertiesRequest": {
                "type": "object",
                "title": "DatasourcePropertiesRequest",
                "description": "Body for datasource properties request",
                "properties": {
                    "databaseName": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Database name",
                        "x-pattern-message": "extension pattern message."
                    },
                    "databaseProvider": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Database provider"
                    },
                    "databasePlatform": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Full qualified library name from database platform"
                    },
                    "userName": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Database user name"
                    },
                    "password": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Database Password"
                    },
                    "jdbcConnectionUrl": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Jdbc connection url"
                    },
                    "driverClassName": {
                        "type": "string",
                        "pattern": "(.|\\s)*\\S(.|\\s)*",
                        "description": "Full qualified library driver name"
                    },
                    "databaseDialect": {
                        "type": "string",
                        "description": "Database SQL dialect"
                    },
                    "databaseSchema": {
                        "type": "string",
                        "description": "Database schema name"
                    }
                },
                "required": [
                    "databaseName",
                    "databaseProvider",
                    "databasePlatform",
                    "userName",
                    "password",
                    "jdbcConnectionUrl",
                    "driverClassName",
                    "databaseDialect"
                ]
            },
            "DatasourcePropertiesResponse": {
                "type": "object",
                "title": "DatasourcePropertiesResponse",
                "description": "Datasource properties response",
                "properties": {
                    "databaseId": {
                        "type": "integer",
                        "description": "Database unique identifier"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Database name"
                    },
                    "databaseProvider": {
                        "type": "string",
                        "description": "Database provider"
                    },
                    "databasePlatform": {
                        "type": "string",
                        "description": "Full qualified library name from database platform"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Database user name"
                    },
                    "password": {
                        "type": "string",
                        "description": "Database Password"
                    },
                    "jdbcConnectionUrl": {
                        "type": "string",
                        "description": "Jdbc connection url"
                    },
                    "driverClassName": {
                        "type": "string",
                        "description": "Full qualified library driver name"
                    },
                    "databaseDialect": {
                        "type": "string",
                        "description": "Database SQL dialect"
                    },
                    "databaseSchema": {
                        "type": "string",
                        "description": "Database schema name"
                    },
                    "createDateTime": {
                        "type": "string",
                        "description": "ISO format date time from register creation."
                    },
                    "updateDateTime": {
                        "type": "string",
                        "description": "ISO format date time from last update."
                    }
                }
            },
            "JobExecutionResponse": {
                "type": "object",
                "title": "JobExecutionResponse",
                "description": "Response from batch job execution metadata.",
                "properties": {
                    "batchStatus": {
                        "$ref": "#/components/schemas/BatchStatusEnum"
                    },
                    "jobExecutionId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Job execution unique identifier"
                    },
                    "jobName": {
                        "type": "string",
                        "description": "Job name."
                    },
                    "jobStartTime": {
                        "type": "string",
                        "description": "ISO format job execution start date time."
                    },
                    "jobEndTime": {
                        "type": "string",
                        "description": "ISO format job execution end date time."
                    },
                    "jobElapsedTime": {
                        "type": "string",
                        "description": "Job execution elapsed time."
                    },
                    "exitStatus": {
                        "$ref": "#/components/schemas/ExitStatusEnum"
                    },
                    "exitMessage": {
                        "type": "string",
                        "description": "Job execution exit message."
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StepMetadataResponse"
                        },
                        "minItems": 1
                    }
                }
            },
            "StepMetadataResponse": {
                "type": "object",
                "title": "StepMetadataResponse",
                "description": "Response from batch step execution metadata.",
                "properties": {
                    "batchStatus": {
                        "$ref": "#/components/schemas/BatchStatusEnum"
                    },
                    "stepName": {
                        "type": "string",
                        "description": "Step name."
                    },
                    "stepStartTime": {
                        "type": "string",
                        "description": "ISO format job execution start date time."
                    },
                    "stepEndTime": {
                        "type": "string",
                        "description": "ISO format job execution end date time."
                    },
                    "stepElapsedTime": {
                        "type": "string",
                        "description": "Step execution elapsed time."
                    },
                    "commitCount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The number of times in which the step has committed a transaction during this execution."
                    },
                    "readCount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The number of items read during this execution."
                    },
                    "writeCount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The number of items written and committed during this execution."
                    },
                    "writeSkipCount": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The number of items skipped on write during this execution."
                    },
                    "exitStatus": {
                        "$ref": "#/components/schemas/ExitStatusEnum"
                    },
                    "exitMessage": {
                        "type": "string",
                        "description": "Job execution exit message."
                    }
                }
            },
            "JobParametersRequest": {
                "type": "object",
                "title": "JobParametersRequest",
                "description": "Body for start batch job execution with parameters",
                "properties": {
                    "dataBundleId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Data Bundle unique identifier"
                    }
                },
                "required": [
                    "dataBundleId"
                ]
            },
            "ProblemDetail": {
                "type": "object",
                "required": [
                    "status",
                    "title"
                ],
                "additionalProperties": true,
                "properties": {
                    "type": {
                        "type": "string",
                        "format": "uri",
                        "description": "An absolute URI that identifies the problem type.  When referenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).\n",
                        "default": "about:blank"
                    },
                    "title": {
                        "type": "string",
                        "description": "A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable\n"
                    },
                    "status": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The HTTP status code generated by the origin server for this occurrence\nof the problem.\n",
                        "minimum": 100,
                        "maximum": 600,
                        "exclusiveMaximum": true
                    },
                    "detail": {
                        "type": "string",
                        "description": "A human readable explanation specific to this occurrence of the\nproblem.\n"
                    }
                }
            },
            "BundledTableRequest": {
                "type": "object",
                "title": "BundledTableRequest",
                "description": "Body for bundled table definitions request",
                "properties": {
                    "sourceTableId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Indicates table definitions unique identifier from source Datasource."
                    },
                    "targetTableId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Indicates table definitions unique identifier from target Datasource."
                    },
                    "relationalOrdering": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Indicates the table relational ordering from parents tables to child tables."
                    },
                    "querySelect": {
                        "type": "string",
                        "pattern": "^SELECT(?:[^;'\\n]|(?:'[^'\\n]+'))+FROM(?:[^;'\\n]|(?:'[^'\\n]+'))+?\\s.*",
                        "description": "Indicates extract data sql query (select). If it's not informed, the system will use default query."
                    },
                    "queryInsert": {
                        "type": "string",
                        "pattern": "^INSERT INTO(?:[^;'\\n]|(?:'[^'\\n]+'))+VALUES(?:[^;'\\n]|(?:'[^'\\n]+'))+?\\s.*",
                        "description": "Indicates load data sql query (insert). If it's not informed, the system will use default query."
                    },
                    "queryUpdate": {
                        "type": "string",
                        "pattern": "^UPDATE(?:[^;'\\n]|(?:'[^'\\n]+'))+SET(?:[^;'\\n]|(?:'[^'\\n]+'))+?\\s.*",
                        "description": "Indicates load data sql query (update). If it's not informed, the system will use default query."
                    }
                },
                "required": [
                    "sourceTableId",
                    "targetTableId",
                    "relationalOrdering"
                ]
            },
            "BundledTableResponse": {
                "type": "object",
                "title": "BundledTableResponse",
                "description": "Body for table definitions response",
                "properties": {
                    "bundledTableId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Indicates bundled tables unique identifier."
                    },
                    "sourceTableId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Indicates table definitions unique identifier from source Datasource."
                    },
                    "targetTableId": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Indicates table definitions unique identifier from target Datasource."
                    },
                    "tablePhysicalName": {
                        "type": "string",
                        "description": "Table physical name"
                    },
                    "relationalOrdering": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Indicates the table relational ordering from parents tables to child tables."
                    },
                    "querySelect": {
                        "type": "string",
                        "description": "Indicates extract data sql query (select). If it's not informed, the system will use default query."
                    },
                    "queryInsert": {
                        "type": "string",
                        "description": "Indicates load data sql query (insert). If it's not informed, the system will use default query."
                    },
                    "queryUpdate": {
                        "type": "string",
                        "description": "Indicates load data sql query (update). If it's not informed, the system will use default query."
                    }
                }
            },
            "ExitStatusEnum": {
                "type": "string",
                "description": "Job or Step execution exit status.",
                "enum": [
                    "UNKNOWN",
                    "EXECUTING",
                    "COMPLETED",
                    "NOOP",
                    "FAILED",
                    "STOPPED"
                ]
            },
            "BatchStatusEnum": {
                "type": "string",
                "description": "Batch execution status.",
                "enum": [
                    "COMPLETED",
                    "STARTING",
                    "STARTED",
                    "STOPPING",
                    "STOPPED",
                    "FAILED",
                    "ABANDONED",
                    "UNKNOWN"
                ]
            }
        },
        "examples": {
            "badRequest": {
                "value": {
                    "type": "https://http.cat/400",
                    "title": "Bad Request",
                    "status": 400,
                    "detail": "Invalid attribute"
                },
                "summary": "Bad request response"
            },
            "unauthorized": {
                "value": {
                    "type": "https://http.cat/401",
                    "title": "Unauthorized",
                    "status": 401,
                    "detail": "Unauthorized request"
                },
                "summary": "Unauthorized response"
            },
            "notFound": {
                "value": {
                    "type": "https://http.cat/404",
                    "title": "Not Found",
                    "status": 404,
                    "detail": "Resource not found"
                },
                "summary": "Not Found response"
            },
            "unprocessableEntity": {
                "value": {
                    "type": "https://http.cat/422",
                    "title": "Unprocessable Entity",
                    "status": 422,
                    "detail": "Unprocessable Entity"
                },
                "summary": "Unprocessable Entity response."
            },
            "serverError": {
                "value": {
                    "type": "https://http.cat/500",
                    "title": "Server Error",
                    "status": 500,
                    "detail": "Server Error"
                },
                "summary": "Server Error response"
            },
            "bundleRequest": {
                "value": {
                    "bundleName": "DUMMY_BUNDLE",
                    "sourceDatasourceId": 0,
                    "targetDatasourceId": 1
                },
                "summary": "Bundle request"
            },
            "dataBundleRequest": {
                "value": {
                    "bundleName": "DUMMY_BUNDLE",
                    "sourceDatasourceId": 0,
                    "targetDatasourceId": 1,
                    "bundledTables": [
                        {
                            "sourceTableId": 0,
                            "targetTableId": 1,
                            "relationalOrdering": 1,
                            "querySelect": "SELECT * FROM DUMMY_TABLE WHERE DUMMY_TABLE_ID = :DUMMY_TABLE_ID",
                            "queryInsert": "INSERT INTO DUMMY_TABLE (DUMMY_TABLE_ID, DUMMY_TABLE_DESC) VALUES (:DUMMY_TABLE_ID, :DUMMY_TABLE_DESC)",
                            "queryUpdate": "UPDATE DUMMY_TABLE SET DUMMY_TABLE_DESC=:DUMMY_TABLE_DESC WHERE DUMMY_TABLE_ID=:DUMMY_TABLE_ID"
                        }
                    ]
                },
                "summary": "Data Bundle request"
            },
            "dataTableRequest": {
                "value": {
                    "tablePhysicalName": "DUMMY_NAME"
                },
                "summary": "Data Table request"
            },
            "datasourcePropertiesRequest": {
                "value": {
                    "databaseName": "H2",
                    "databaseProvider": "H2",
                    "databasePlatform": "org.hibernate.dialect.H2Dialect",
                    "userName": "h2sa",
                    "password": "admin",
                    "jdbcConnectionUrl": "jdbc:h2:mem:testdb",
                    "driverClassName": "org.h2.Driver",
                    "databaseDialect": "H2Dialect",
                    "databaseSchema": "DUMMY_SCHEMA"
                },
                "summary": "Datasource Properties request"
            },
            "jobParametersRequest": {
                "value": {
                    "dataBundleId": 0
                },
                "summary": "Job Parameters request"
            },
            "bundledTableRequest": {
                "value": {
                    "sourceTableId": 0,
                    "targetTableId": 1,
                    "relationalOrdering": 1,
                    "querySelect": "SELECT * FROM DUMMY_TABLE WHERE DUMMY_TABLE_ID = :DUMMY_TABLE_ID",
                    "queryInsert": "INSERT INTO DUMMY_TABLE (DUMMY_TABLE_ID, DUMMY_TABLE_DESC) VALUES (:DUMMY_TABLE_ID, :DUMMY_TABLE_DESC)",
                    "queryUpdate": "UPDATE DUMMY_TABLE SET DUMMY_TABLE_DESC=:DUMMY_TABLE_DESC WHERE DUMMY_TABLE_ID=:DUMMY_TABLE_ID"
                },
                "summary": "Bundled Table request"
            },
            "jobExecutionResponse": {
                "value": {
                    "batchStatus": "COMPLETED",
                    "jobExecutionId": 0,
                    "jobName": "JOB_NAME",
                    "jobStartTime": "2020-07-10 15:00:00.000",
                    "jobEndTime": "2020-07-10 15:01:00.000",
                    "jobElapsedTime": "00:01:00",
                    "exitStatus": "FAILED",
                    "exitMessage": "Dummy error message",
                    "steps": [
                        {
                            "batchStatus": "COMPLETED",
                            "stepName": "STEP_NAME",
                            "stepStartTime": "2020-07-10 15:00:00.000",
                            "stepEndTime": "2020-07-10 15:01:00.000",
                            "stepElapsedTime": "00:01:00",
                            "commitCount": 0,
                            "readCount": 0,
                            "writeCount": 0,
                            "writeSkipCount": 0,
                            "exitStatus": "FAILED",
                            "exitMessage": "Dummy error message"
                        }
                    ]
                },
                "summary": "Job Execution response"
            }
        },
        "securitySchemes": {
            "Authorization": {
                "type": "http",
                "description": "Authorized Valid JWT Token",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}